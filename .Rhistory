install.packages("knitr")
* The mean total number of steps taken per day is `r as.numeric(mean_result1)`.
result2 <- data.frame(aggregate(dt1$steps, by=list(as.factor(dt1$date)), FUN=average))
?plot
result2
unzip("activity.zip")
dt <- read.csv("activity.csv", na.strings = "NA", stringsAsFactors = FALSE)
dt[,2] <- as.Date(dt[,2])
dt1 <- dt[complete.cases(dt), ]
result2 <- data.frame(aggregate(dt1$steps, by=list(as.factor(dt1$interval)), FUN=mean))
result2
plot(result2, type = "p", main = "Time series plot")
plot(result2, type = "l", main = "Time series plot")
```
plot(result2, type = "b", main = "Time series plot")
plot(result2[,1],result2[,2], type = "l", main = "Time series plot")
```
plot(result2[,1],result2[,2], type = "n", main = "Time series plot")
plot(result2[,1],result2[,2], type = "n", main = "Time series plot")
lines(result2[,1],result2[,2])
plot(result2[,1],result2[,2], type = "n",col=rgb(0,0,0,0), main = "Time series plot")
lines(result2[,1],result2[,2])
result2 <- ddply(subset(dt, !is.na(dt$steps)), .(interval),
summarize, avg_steps = mean(steps))
result2 <- data.frame(aggregate(dt1$steps, by=list(as.factor(dt1$interval)), FUN=mean))
plot(result2[,1],result2[,2], type = "n",col=rgb(0,0,0,0), main = "Time series plot")
lines(result2[,1],result2[,2])
plot(result2[,1],result2[,2], type = "l",col=rgb(0,0,0,0), main = "Time series plot")
plot(result2[,1],result2[,2], type = "l",col=rgb(0,0,0,alpha=0), main = "Time series plot")
plot(result2, type = "l",col=rgb(0,0,0,alpha=0), main = "Time series plot")
lines(result2[,1],result2[,2])
lines(result2)
plot(result2, type = "l",col=rgb(0,0,0,alpha=0), main = "Time series plot")
lines(result2)
lines(result2)
plot(result2[,1],result2[,2], type = 'n', col = rgb(0,0,0,alpha=0), main = "Time series plot")
lines(result2[,1],result2[,2])
plot(result2[,1],result2[,2], type = 'o', col = rgb(0,0,0,alpha=0), main = "Time series plot")
?plot
plot(result2[,1],result2[,2], type = "h", col = rgb(0,0,0,alpha=0), main = "Time series plot")
plot(result2[,1],result2[,2], type = "1", col = rgb(0,0,0,alpha=0), main = "Time series plot")
plot(result2[,1],result2[,2],  col = rgb(0,0,0,alpha=0), main = "Time series plot")
lines(result2[,1],result2[,2])
library(plyr)
result2 <- ddply(subset(dt, !is.na(dt$steps)), .(interval),
summarize, avg_steps = mean(steps))
plot(result2[,1],result2[,2],  col = rgb(0,0,0,alpha=0), main = "Time series plot")
lines(result2[,1],result2[,2])
plot(result2[,1],result2[,2],  type="l", main = "Time series plot")
result2
str(result2)
?ddply
result2[which.max(result2$avg_steps), 2]
result2[which.max(result2$avg_steps), 1]
result3 <- complete.cases(dt)
sum(result3)
sum(!result3)
sum(!complete.cases(dt))
dt <- read.csv("activity.csv", na.strings = "NA", stringsAsFactors = FALSE)
dt[,2] <- as.Date(dt[,2])
dt1 <- dt[complete.cases(dt), ]
result2 <- data.frame(aggregate(dt1$steps, by = list(as.factor(dt1$interval)), FUN=mean))
result2[,1] <- as.numeric(as.character(result2[,1]))
result2[which.max(result2[,2]), 1]
result2
match(dt[,3],result2[,1])
dt[match(dt[,3],result2[,1]),]
names(dt[match(dt[,3],result2[,1]),])
test <- dt[match(dt[,3],result2[,1]),]
str(test)
str(result2)
test <- dt[dt[,3] %in% result2[,1],]
str(test)
str(result2)
dt[,3] %in% result2[,1]
test <- result2[dt[,3] %in% result2[,1],]
str(test)
test <- dt[dt[,3] %in% result2[,1],]
str(test)
names(result2)
str(result2)
names(result2) <- c("interval","avg_step")
names(result2)
names(dt)
plyr1 <- join(dt,result2,by = "interval")
library(plyr)
plyr1 <- join(dt,result2,by = "interval")
plyr1
names(plyr)
names(plyr1)
names(result2) <- c("interval","avg_steps")
library(plyr)
plyr1 <- join(dt,result2,by = "interval")
names(plyr1)
dt <- join(dt,result2,by = "interval")
str(dt)
ifelse(is.na(dt[,1]),dt[,4],dt[,1])
dt <- read.csv("activity.csv", na.strings = "NA", stringsAsFactors = FALSE)
dt_temp <- join(dt,result2,by = "interval")
steps <- ifelse(is.na(dt_temp[,1]),dt_temp[,4],dt_temp[,1])
result2
dt2 <- cbind(steps,dt[,c(2,3)])
str(dt2)
dt <- read.csv("activity.csv", na.strings = "NA", stringsAsFactors = FALSE)
dt[,2] <- as.Date(dt[,2])
names(result2) <- c("interval","avg_steps")
dt_temp <- join(dt,result2,by = "interval")
steps <- ifelse(is.na(dt_temp[,1]),dt_temp[,4],dt_temp[,1])
dt2 <- cbind(steps,dt[,c(2,3)])
str(dt2)
result3 <- data.frame(aggregate(dt2$steps, by = list(as.factor(dt2$date)), FUN=sum))
hist(result3[, 2], labels = TRUE, col = "steelblue", main = "Histogram of Total Steps Taken Each Day",
xlab = "Total Steps Taken Each Day")
?weekdays
weekdays(dt2[,2])
indicator <- ifelse(weekdays(dt2[,2])="Sunday" | weekdays(dt2[,2])="Saturday","weekend","weekday")
indicator <- ifelse(weekdays(dt2[,2])=="Sunday" | weekdays(dt2[,2])=="Saturday","weekend","weekday")
str(indicator)
dt3 <- cbind(dt2,indicator)
str(dt3)
result4 <- data.frame(aggregate(dt1$steps, by = list(as.factor(dt4$interval),dt4$indicator), FUN=mean))
result4 <- data.frame(aggregate(dt1$steps, by = list(as.factor(dt3$interval),dt3$indicator), FUN=mean))
result4 <- data.frame(aggregate(dt3$steps, by = list(as.factor(dt3$interval),dt3$indicator), FUN=mean))
result4
str(result4)
result4[,1] <- as.numeric(as.character(result4[,1]))
str(result4)
xyplot(result2[,1] ~ result2[,3] | result2[,2],  layout = c(1,2), type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
library(lattice)
xyplot(result2[,1] ~ result2[,3] | result2[,2],  layout = c(1,2), type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
xyplot(result4[,1] ~ result4[,3] | result4[,2],  layout = c(1,2), type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
xyplot(result4[,1] ~ result4[,3],  layout = c(1,2), type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
plot(result4[,1] ~ result4[,3],  layout = c(1,2), type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
plot(result4[,1],result4[,3], type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
plot(result4[,1],result4[,3], type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
plot(result4[,1],result4[,3] | result4[,2] , type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
xyplot(result4[,1],result4[,3] | result4[,2] , type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
xyplot(result4[,1],result4[,3] | result4[,2] ,layout= c(1,2), type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
xyplot(result4[,1]~result4[,3] | result4[,2] ,layout= c(1,2), type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
?xyplot
result4[,1]
xlab = "Total Steps Taken Each Day (Missing Values Imputed)")
xyplot(result4[,1]~result4[,3] | result4[,2] ,layout= c(1,2), type="l")
xyplot(result4[,3] | result4[,2] ~ result4[,1] ,layout= c(1,2), type="l")
```
xyplot(result4[,3]~result4[,1] ,layout= c(1,2), type="l")
xyplot(result4[,3]~result4[,1] | result4[,2] ,layout= c(1,2), type="l")
xyplot(result4[,3]~result4[,1] | result4[,2] ,layout= c(1,2), type="l", main = "Average Number of Steps Taken Against 5-minute Interval",
xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", col = "steelblue")
?round
Interval `r max_result2a` contains the maximum average number of steps (`r round(max_result2b,digits = 1)`).
